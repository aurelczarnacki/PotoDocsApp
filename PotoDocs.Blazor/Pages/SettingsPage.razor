@attribute [Authorize]
@page "/ustawienia"
@inject IUserService UserService
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject IToastService toastService

<h3 class="header">Ustawienia</h3>

@if (IsBusy)
{
    <div class="spinner-border text-danger" role="status">
        <span class="visually-hidden">Ładowanie...</span>
    </div>
}
else
{
    <div class="settings-container">
        <div class="section">
            <h4>Profil</h4>
            <div class="profile-info">
                <p><strong>Imię:</strong> @UserDto.FirstName</p>
                <p><strong>Nazwisko:</strong> @UserDto.LastName</p>
                <p><strong>Email:</strong> @UserDto.Email</p>
                <p><strong>Rola:</strong> @UserDto.Role</p>
            </div>
        </div>

        <div class="section">
            <h4>Zmiana hasła</h4>
            <EditForm Model="@ChangePasswordDto" OnValidSubmit="ChangePasswordAsync">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Stare hasło:</label>
                    <InputText @bind-Value="ChangePasswordDto.OldPassword" type="password" class="form-control" />
                    <ValidationMessage For="@(() => ChangePasswordDto.OldPassword)" />
                </div>

                <div class="form-group">
                    <label>Nowe hasło:</label>
                    <InputText @bind-Value="ChangePasswordDto.NewPassword" type="password" class="form-control" />
                    <ValidationMessage For="@(() => ChangePasswordDto.NewPassword)" />
                </div>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="error-message">@errorMessage</p>
                }

                <div class="btn-container">
                <button type="submit" class="btn btn-primary">Zmień hasło</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private UserDto UserDto { get; set; } = new();
    private ChangePasswordDto ChangePasswordDto { get; set; } = new();
    private bool IsBusy { get; set; } = true;
    private string? errorMessage;

    private async Task OnAreNotificationsEnabledChanged(bool value)
    {
        await LocalStorage.SetItemAsync("AreNotificationsEnabled", value);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUser();
        IsBusy = false;
    }

    private async Task LoadUser()
    {
        try
        {
            UserDto = await UserService.GetCurrentUser();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd: {ex.Message}");
        }
    }

    private async Task ChangePasswordAsync()
    {
        try
        {
            ChangePasswordDto.Email = UserDto.Email;
            var result = await UserService.ChangePassword(ChangePasswordDto);

            if (string.IsNullOrEmpty(result))
            {
                toastService.ShowSuccess($"Hasło zostało zmienione, zaloguj się ponownie");
                Navigation.NavigateTo("/logowanie");
            }
            else
            {
                toastService.ShowError(result);
                errorMessage = result;
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd zmiany hasła: {ex.Message}");
        }
    }
}
