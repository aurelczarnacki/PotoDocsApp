@attribute [Authorize]
@page "/kierowca"
@inject IRoleService RoleService
@inject IUserService UserService
@inject IToastService toastService
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<h3 class="title-text">@(PageTitle ?? "Nowy użytkownik")</h3>

@if (IsBusy)
{
    <div class="spinner-border text-danger" role="status">
        <span class="visually-hidden">Ładowanie...</span>
    </div>
}
else
{
    <EditForm Model="@UserDto" OnValidSubmit="Save" class="form-container">
        <DataAnnotationsValidator />

        <!-- Imię -->
        <div class="form-group">
            <label>Imię</label>
            <InputText @bind-Value="UserDto.FirstName" class="form-control" placeholder="Wprowadź imię" />
            <ValidationMessage For="@(() => UserDto.FirstName)" class="custom-error" />
        </div>

        <!-- Nazwisko -->
        <div class="form-group">
            <label>Nazwisko</label>
            <InputText @bind-Value="UserDto.LastName" class="form-control" placeholder="Wprowadź nazwisko" />
            <ValidationMessage For="@(() => UserDto.LastName)" class="custom-error" />
        </div>

        <!-- E-mail -->
        <div class="form-group">
            <label>E-mail</label>
            <InputText @bind-Value="UserDto.Email" class="form-control" placeholder="Wprowadź E-mail" />
            <ValidationMessage For="@(() => UserDto.Email)" class="custom-error" />
        </div>

        <!-- Rola -->
        <div class="form-group">
            <label>Rola</label>
            <select @bind="SelectedRole" class="form-control">
                <option value="">Wybierz rolę</option>
                @foreach (var role in Roles)
                {
                    <option value="@role">@role</option>
                }
            </select>
            <ValidationMessage For="@(() => UserDto.Role)" class="custom-error" />
        </div>

        <!-- Przyciski -->
        <div class="btn-container">
        <button type="button" class="btn btn-secondary" @onclick="GeneratePassword">Generuj hasło</button>
        <button type="submit" class="btn btn-primary">Zapisz</button>
        </div>

    </EditForm>
}
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string User { get; set; }
    private UserDto UserDto { get; set; } = new UserDto();
    private List<string> Roles { get; set; } = new();
    private string SelectedRole
    {
        get => UserDto.Role;
        set => UserDto.Role = value;
    }

    private bool IsBusy { get; set; } = false;
    private string PageTitle { get; set; } = "Nowy użytkownik";

    protected override async Task OnInitializedAsync()
    {
        await GetRoles();
        if (!string.IsNullOrEmpty(User))
        {
            UserDto = JsonSerializer.Deserialize<UserDto>(Uri.UnescapeDataString(User));
        }
    }

    private async Task GetRoles()
    {
        try
        {
            IsBusy = true;
            Roles = (await RoleService.GetRoles()).ToList();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd przy pobieraniu ról: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }

    private async Task Save()
    {
        if (!Validate()) return;

        try
        {
            IsBusy = true;

            await UserService.RegisterAsync(UserDto);
            toastService.ShowSuccess($"Użytkownik zapisany");

            var previousUrl = await LocalStorage.GetItemAsync<string>("previousPage");
            Navigation.NavigateTo(previousUrl ?? "/");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd przy zapisywaniu użytkownika: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }

    private async Task GeneratePassword()
    {
        if (string.IsNullOrWhiteSpace(UserDto.Email))
        {
            toastService.ShowError("Wprowadź e-mail przed generowaniem hasła.");
            return;
        }

        try
        {
            IsBusy = true;
            await UserService.GeneratePassword(UserDto.Email);
            toastService.ShowSuccess("Wygenerowano nowe hasło.");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd przy generowaniu hasła: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }

    private bool Validate()
    {
        var context = new ValidationContext(UserDto);
        var validationResults = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(UserDto, context, validationResults, true);

        return isValid;
    }
}
