@attribute [Authorize]
@page "/pobieranie"
@inject IOrderService OrderService
@inject IToastService toastService
@inject IBlazorDownloadFileService BlazorDownloadFileService

<h3 class="title-text">Pobieranie</h3>

@if (IsBusy)
{
    <div class="spinner-border text-danger" role="status">
        <span class="visually-hidden">Ładowanie...</span>
    </div>
}
else
{
    <EditForm EditContext="@editContext" OnValidSubmit="GetOrdersAsync" class="form-container">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Rok</label>
            <select class="form-control" @bind="SelectedYear">
                @foreach (var year in AvailableYears.Keys)
                {
                    <option value="@year">@year</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label>Miesiąc</label>
            <select class="form-control" @bind="SelectedMonth" disabled="@(AvailableMonths.Count == 0)">
                @foreach (var month in AvailableMonths)
                {
                    <option value="@month">@Months[month]</option>
                }
            </select>
        </div>

        <div class="btn-container">
        <button type="submit" class="btn-submit" disabled="@IsButtonDisabled">
            Pobierz zlecenia
        </button>
        </div>


    </EditForm>
}

@code {
    private bool IsButtonDisabled => IsBusy || AvailableMonths == null || AvailableMonths.Count == 0;

    private bool IsBusy { get; set; } = false;

    private int _selectedYear;
    private int SelectedYear
    {
        get => _selectedYear;
        set
        {
            if (_selectedYear != value)
            {
                _selectedYear = value;
                OnYearChanged();
            }
        }
    }

    private int SelectedMonth { get; set; }
    private EditContext editContext;

    private Dictionary<int, List<int>> AvailableYears = new();
    private List<int> AvailableMonths = new();

    private Dictionary<int, string> Months = new()
    {
        {1, "Styczeń"}, {2, "Luty"}, {3, "Marzec"}, {4, "Kwiecień"},
        {5, "Maj"}, {6, "Czerwiec"}, {7, "Lipiec"}, {8, "Sierpień"},
        {9, "Wrzesień"}, {10, "Październik"}, {11, "Listopad"}, {12, "Grudzień"}
    };

    protected override async Task OnInitializedAsync()
    {
        IsBusy = true;
        try
        {
            AvailableYears = await OrderService.GetAvailableYearsAndMonthsAsync();

            if (AvailableYears.Any())
            {
                SelectedYear = AvailableYears.Keys.First();
            }

            editContext = new EditContext(this);
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void OnYearChanged()
    {
        if (AvailableYears.ContainsKey(SelectedYear))
        {
            AvailableMonths = AvailableYears[SelectedYear];
            SelectedMonth = AvailableMonths.FirstOrDefault();
        }
    }

    private async Task GetOrdersAsync()
    {
        if (IsBusy) return;

        try
        {
            IsBusy = true;
            var fileBytes = await OrderService.DownloadInvoices(SelectedYear, SelectedMonth);

            if (fileBytes == null || fileBytes.Length == 0)
            {
                toastService.ShowError("Nie znaleziono faktur dla wybranego miesiąca.");
                return;
            }

            var fileName = $"FAKTURY_{SelectedMonth:D2}-{SelectedYear}.zip";
            await BlazorDownloadFileService.DownloadFile(fileName, fileBytes, "application/zip");
            toastService.ShowSuccess($"Pobrano {fileName}");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd pobierania pliku: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }
}
