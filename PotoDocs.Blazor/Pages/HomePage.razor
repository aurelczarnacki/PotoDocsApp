@attribute [Authorize]
@page "/"
@inject NavigationManager Navigation
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject IOrderService OrderService
@inject IUserService UserService
@inject IToastService toastService
@inject IModalService Modal

<PageTitle>Ostatnie zlecenia</PageTitle>

<div class="header">
    <h1>Ostatnie zlecenia</h1>
    <div class="controls">
        <button class="refresh-button" @onclick="RefreshOrders" disabled="@IsBusy">
            <img src="images/icon_refresh.png" alt="Odśwież" />
        </button>
        <button class="add-button" @onclick="AddOrder">Dodaj zlecenie</button>
    </div>
</div>

<div class="orders-container">
    @if (IsBusy)
    {
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden">Ładowanie...</span>
        </div>
    }
    else if (Orders == null || !Orders.Any())
    {
        <div class="empty-view">
            <p>Brak zleceń do wyświetlenia</p>
        </div>
    }
    else
    {
        @foreach (var order in Orders)
        {
            <div class="order-card" @onclick="() => ToggleOrder(order.InvoiceNumber)">
                <div class="order-details">
                    <h3>@order.CompanyName</h3>
                    <div class="details-row">
                        <p>@order.LoadingDate?.ToString("dd.MM.yyyy") • @(order.Price?.ToString("0.00") ?? "0") @order.Currency</p>
                        <p class="driver-info">@(order.Driver != null ? order.Driver.FirstAndLastName : "Brak kierowcy")</p>
                    </div>
                </div>

                @if (ExpandedOrderId == order.InvoiceNumber)
                {
                    <div class="order-actions">
                        <button class="details-button" @onclick="() => ViewOrderDetails(order)">
                            <img src="Images/icon_neworder.png" alt="Details" class="button-image" />Szczegóły
                        </button>
                        <button class="edit-button" @onclick="() => EditOrder(order)">
                            <img src="Images/icon_edit.png" alt="Edit" class="button-image"/>Edytuj
                            </button>
                        <button class="invoice-button" @onclick="() => DownloadInvoice(order)">
                            <img src="Images/icon_download.png" alt="Edit" class="button-image" />Faktura
                        </button>
                        <button class="delete-button" @onclick="() => DeleteOrder(order)">
                            <img src="Images/icon_delete.png" alt="Edit" class="button-image" />Usuń
                        </button>
                    </div>
                }
            </div>
        }
    }
</div>

<div class="show-more">
    <button class="show-more-button" @onclick="ShowMoreOrders">Pokaż więcej</button>
</div>

@code {
    private IEnumerable<OrderDto> Orders;
    private bool IsBusy = false;
    private UserDto User;
    private int? ExpandedOrderId = null;

    private void ToggleOrder(int orderId)
    {
        ExpandedOrderId = ExpandedOrderId == orderId ? null : orderId;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUser();
        await RefreshOrders();
    }

    private async Task GetUser()
    {
        try
        {
            IsBusy = true;
            User = await UserService.GetCurrentUser();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }

    private async Task RefreshOrders()
    {
        try
        {
            IsBusy = true;
            Orders = await OrderService.GetAll(1, 5, User.Email);
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void AddOrder()
    {
        Navigation.NavigateTo("/zlecenie/edycja");
    }

    private void EditOrder(OrderDto order)
    {
        if (order != null)
        {
            var orderJson = Uri.EscapeDataString(JsonSerializer.Serialize(order));
            Navigation.NavigateTo($"/zlecenie/edycja?order={orderJson}");
        }
    }

    private void ViewOrderDetails(OrderDto order)
    {
        if (order != null)
        {
            var orderJson = Uri.EscapeDataString(JsonSerializer.Serialize(order));
            Navigation.NavigateTo($"/zlecenie/szczegoly?order={orderJson}");
        }
    }
     
    private async Task DownloadInvoice(OrderDto order)
    {
        if (order == null) return;

        try
        {
            IsBusy = true;
            string name = OrderService.FormatInvoiceNumber(order.InvoiceNumber);
            var fileBytes = await OrderService.DownloadInvoice(order.InvoiceNumber);

            await BlazorDownloadFileService.DownloadFile(name, fileBytes, "application/pdf");

            toastService.ShowSuccess($"Pobrano {name}");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd podczas pobierania faktury: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }


    private async Task DeleteOrder(OrderDto order)
    {
        if (order == null) return;

        var parameters = new ModalParameters();
        string name = OrderService.FormatInvoiceNumber(order.InvoiceNumber);

        parameters.Add("Message", $"Czy na pewno chcesz usunąć zlecenie {name}?");
        

        var modalRef = Modal.Show<ConfirmDialog>("Potwierdzenie", parameters);
        var result = await modalRef.Result;

        if (!result.Cancelled)
        {
            try
            {
                IsBusy = true;
                await OrderService.Delete(order.InvoiceNumber);
                await RefreshOrders();
                toastService.ShowSuccess($"Pomyślnie usunięto zlecenie {name}");
            }
            catch (Exception ex)
            {
                toastService.ShowError($"Błąd podczas usuwania zlecenia: {ex.Message}");
            }
            finally
            {
                IsBusy = false;
            }
        }
    }
    private async Task ShowMoreOrders()
    {
        try
        {
            IsBusy = true;

            var ordersList = Orders.ToList();

            if (ordersList.Count % 5 == 0)
            {
                int currentPage = ordersList.Count / 5 + 1;
                var newOrders = await OrderService.GetAll(currentPage, 5, User.Email);

                if (newOrders?.Any() == true)
                {
                    ordersList.AddRange(newOrders);
                    Orders = ordersList;
                }
            }
            else
            {
                toastService.ShowInfo($"Brak zleceń do pobrania.");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }
}
