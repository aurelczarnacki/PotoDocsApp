@attribute [Authorize]
@inject IOrderService OrderService
@inject IUserService UserService
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject IToastService toastService
@inject IBlazorDownloadFileService BlazorDownloadFileService

@page "/zlecenie/edycja"
<div class="background">
<h3 class="title-text">@(OrderDto.InvoiceNumber == 0 ? "Nowe zlecenie" : "Edytowanie")</h3>
<div class="form-card">
@if (IsBusy)
        {
            <div class="spinner-border text-danger" role="status">
                <span class="visually-hidden">Ładowanie...</span>
            </div>
        }
        else
        {
            <EditForm Model="@OrderDto" OnValidSubmit="HandleValidSubmit" class="form-container">
                <DataAnnotationsValidator />

                <!-- Pliki -->
                <div class="section">
                    <label class="section-title">Pliki</label>
                    <div class="file-upload-container">
                        <span class="file-label">PDF</span>
                        <label class="file-upload-btn">
                            Dodaj plik
                            <InputFile hidden OnChange="HandlePDFUpload" accept=".pdf,application/pdf" />
                        </label>
                    </div>

                    <div class="file-list">
                        <div class="file-item">
                            <button class="download-btn" @onclick="() => DownloadFile(OrderDto.PDFUrl)">@OrderDto.PDFUrl</button>
                        </div>
                    </div>


                    <div class="file-upload-container">
                        <span class="file-label">CMR</span>
                        <label class="file-upload-btn">
                            Dodaj plik
                            <InputFile hidden OnChange="HandleCMRUpload" multiple accept=".pdf,application/pdf" />
                        </label>
                    </div>

                    @if (OrderDto.CMRFiles != null && OrderDto.CMRFiles.Any())
                    {
                        <div class="file-list">
                            @foreach (var cmrFile in OrderDto.CMRFiles)
                            {
                                <div class="file-item">
                                    <button class="download-btn" @onclick="() => DownloadFile(cmrFile)">@cmrFile</button>
                                    <button class="delete-btn" @onclick="() => RemoveCMRFile(cmrFile)">Usuń</button>
                                </div>
                            }
                        </div>
                    }
                </div>

                <!-- Informacje ogólne -->
                <div class="section">
                    <label class="section-title">Informacje ogólne</label>

                    <div class="form-group">
                        <label class="input-label">Kierowca</label>
                        <InputSelect @bind-Value="SelectedDriverEmail" class="form-control">
                            <option value="">Wybierz kierowcę</option>
                            @foreach (var user in Users)
                            {
                                <option value="@user.Email">@user.FirstAndLastName</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <label class="input-label">Numer faktury</label>
                        <InputNumber @bind-Value="OrderDto.InvoiceNumber" placeholder="Numer faktury" class="form-control" />
                        <ValidationMessage For="@(() => OrderDto.InvoiceNumber)" class="custom-error" />
                    </div>

                    <div class="form-group">
                        <label class="input-label">Nazwa firmy</label>
                        <InputText @bind-Value="OrderDto.CompanyName" placeholder="Nazwa firmy" class="form-control" />
                        <ValidationMessage For="@(() => OrderDto.CompanyName)" class="custom-error" />
                    </div>

                    <div class="form-group">
                        <label class="input-label">NIP</label>
                        <InputText @bind-Value="OrderDto.CompanyNIP" placeholder="NIP" class="form-control" />
                        <ValidationMessage For="@(() => OrderDto.CompanyNIP)" class="custom-error" />
                    </div>

                    <div class="form-group">
                        <label class="input-label">Adres firmy</label>
                        <InputText @bind-Value="OrderDto.CompanyAddress" placeholder="Adres firmy" class="form-control" />
                        <ValidationMessage For="@(() => OrderDto.CompanyAddress)" class="custom-error" />
                    </div>
                </div>

                <!-- Informacje dodatkowe -->
                <div class="section">
                    <label class="section-title">Informacje dodatkowe</label>

                    <div class="horizontal-group">
                        <div class="horizontal-group-element">
                            <label class="horizontal-input-label">Data załadunku</label>
                        <InputDate @bind-Value="OrderDto.LoadingDate" class="form-control" />
                            <ValidationMessage For="@(() => OrderDto.LoadingDate)" class="custom-error" />
                        </div>
                        <div class="horizontal-group-element">
                            <label class="horizontal-input-label">Data rozładunku</label>
                        <InputDate @bind-Value="OrderDto.UnloadingDate" class="form-control" />
                            <ValidationMessage For="@(() => OrderDto.UnloadingDate)" class="custom-error" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="input-label">Data faktury</label>
                        <InputDate @bind-Value="OrderDto.InvoiceIssueDate" class="form-control" />
                        <ValidationMessage For="@(() => OrderDto.InvoiceIssueDate)" class="custom-error" />
                    </div>

                    <div class="form-group">
                        <label class="input-label">Adres rozładunku</label>
                        <InputText @bind-Value="OrderDto.UnloadingAddress" placeholder="Adres rozładunku" class="form-control" />
                        <ValidationMessage For="@(() => OrderDto.UnloadingAddress)" class="custom-error" />
                    </div>

                    <div class="form-group">
                        <label class="input-label">Kraj</label>
                        <InputText @bind-Value="OrderDto.CompanyCountry" placeholder="Kraj" class="form-control" />
                        <ValidationMessage For="@(() => OrderDto.CompanyCountry)" class="custom-error" />
                    </div>

                    <div class="horizontal-group">
                        <div class="horizontal-group-element">
                            <label class="horizontal-input-label">Kwota</label>
                        <InputNumber @bind-Value="OrderDto.Price" placeholder="Kwota" class="form-control" />
                            <ValidationMessage For="@(() => OrderDto.Price)" class="custom-error" />
                        </div>
                        <div class="horizontal-group-element">
                            <label class="horizontal-input-label">Dni do płatności</label>
                        <InputNumber @bind-Value="OrderDto.PaymentDeadline" placeholder="Dni do płatności" class="form-control" />
                            <ValidationMessage For="@(() => OrderDto.PaymentDeadline)" class="custom-error" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="input-label">Numer zlecenia</label>
                        <InputText @bind-Value="OrderDto.CompanyOrderNumber" placeholder="Numer zlecenia" class="form-control" />
                        <ValidationMessage For="@(() => OrderDto.CompanyOrderNumber)" class="custom-error" />
                    </div>

                    <div class="form-group">
                        <InputCheckbox @bind-Value="HasPaid" class="checkbox" />
                        <label class="checkbox-label">Płatność dokonana</label>
                        
                    </div>
                </div>

                <div class="button-container">
                <button type="submit" class="btn-submit">Zapisz</button>
                </div>
            </EditForm>
        }
    </div>
</div>
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string Order { get; set; }
    private OrderDto OrderDto { get; set; } = new();
    private List<UserDto> Users { get; set; } = new();
    private string SelectedDriverEmail { get; set; }
    private int InvoiceNumber;
    private bool IsBusy { get; set; } = false;
    private long maxFileSize = 5 * 1024 * 1024;

    private bool HasPaidValue
    {
        get => OrderDto.HasPaid ?? false;
        set => OrderDto.HasPaid = value;
    }
    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
        if (!string.IsNullOrEmpty(Order))
        {
            OrderDto = JsonSerializer.Deserialize<OrderDto>(Uri.UnescapeDataString(Order));
            InvoiceNumber = OrderDto.InvoiceNumber;
        }
        if (OrderDto.Driver != null)
        {
            SelectedDriverEmail = OrderDto.Driver.Email;
        }
    }

    private async Task HandlePDFUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file.ContentType != "application/pdf")
        {
            toastService.ShowError("Błąd: Tylko pliki PDF są dozwolone.");
            return;
        }

        if (file.Size > maxFileSize)
        {
            toastService.ShowError($"Błąd: Maksymalny rozmiar pliku to {maxFileSize / 1024} KB.");
            return;
        }

        try
        {
            IsBusy = true;
            using var stream = file.OpenReadStream(maxFileSize);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            OrderDto = await OrderService.Create(ms.ToArray());
            InvoiceNumber = OrderDto.InvoiceNumber;
            toastService.ShowSuccess($"Wysłano plik {e.File.Name}.");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }


    private async Task HandleCMRUpload(InputFileChangeEventArgs e)
    {
        List<byte[]> filesData = new List<byte[]>();
        List<string> errorMessages = new List<string>();

        foreach (var file in e.GetMultipleFiles())
        {
            if (file.ContentType != "application/pdf")
            {
                errorMessages.Add($"Błąd: {file.Name} - tylko pliki PDF są dozwolone.");
                continue;
            }

            if (file.Size > maxFileSize)
            {
                errorMessages.Add($"Błąd: {file.Name} - maksymalny rozmiar pliku to {maxFileSize / 1024} KB.");
                continue;
            }

            try
            {
                using var stream = file.OpenReadStream(maxFileSize);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                filesData.Add(ms.ToArray());
            }
            catch (Exception ex)
            {
                errorMessages.Add($"Błąd podczas przetwarzania pliku {file.Name}: {ex.Message}");
            }
        }

        if (!filesData.Any())
        {
            foreach (var error in errorMessages)
            {
                toastService.ShowError(error);
            }
            return;
        }

        try
        {
            IsBusy = true;
            await OrderService.UploadCMR(filesData, InvoiceNumber);


            toastService.ShowSuccess("Wysłano pliki CMR.");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }


    private async Task HandleValidSubmit()
    {
        try
        {
            OrderDto.Driver = Users.FirstOrDefault(u => u.Email == SelectedDriverEmail);
            await OrderService.Update(OrderDto, InvoiceNumber);
            toastService.ShowSuccess($"Pomyślnie zapisano zlecenie.");

            var previousUrl = await LocalStorage.GetItemAsync<string>("previousPage");
            Navigation.NavigateTo(previousUrl ?? "/");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd przy zapisywaniu zlecenia: {ex.Message}");
        }
    }

    private async Task GetUsers()
    {
        try
        {
            IsBusy = true;
            var allUsers = await UserService.GetAll();
            Users = allUsers.ToList();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd przy pobieraniu kierowców: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }
    private async Task RemoveCMRFile(string cmrFile)
    {
        try
        {
            IsBusy = true;
            await OrderService.RemoveCMR(InvoiceNumber, cmrFile);
            toastService.ShowSuccess($"Pomyślnie usunięto {cmrFile}");
            OrderDto.CMRFiles.Remove(cmrFile);
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd przy usuwaniu CMR: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }
    private async Task DownloadFile(string fileName)
    {
        try
        {
            IsBusy = true;
            var fileBytes = await OrderService.DownloadFile(InvoiceNumber, fileName);

            await BlazorDownloadFileService.DownloadFile(fileName, fileBytes, "application/pdf");

            toastService.ShowSuccess($"Pobrano {fileName}");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Błąd podczas pobierania faktury: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }

    private bool HasPaid
    {
        get => OrderDto.HasPaid ?? false;
        set => OrderDto.HasPaid = value;
    }
}
